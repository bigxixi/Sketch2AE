@import "../Resources/Localization.js"

var exportArtboards = function(context) {
    var doc = context.document;
    var version = context.plugin.version();
    var artboards = doc.currentPage().artboards();
    if(!doc.fileName()){
        NSApplication.sharedApplication().displayDialog_withTitle(local_saveDoc, local_warning);
    }
    var docName = doc.fileName().substring(doc.fileName().lastIndexOf("."),doc.fileName().lastIndexOf("/")+1);
    function createFolderAtPath(pathString) {
        var fileManager = [NSFileManager defaultManager];
        if([fileManager fileExistsAtPath:pathString]) return true;
        return [fileManager createDirectoryAtPath:pathString withIntermediateDirectories:true attributes:nil error:nil];
    }

    function writeTextToFile(text, filePath) {
        var t = [NSString stringWithFormat:@"%@", text],
        f = [NSString stringWithFormat:@"%@", filePath];
        return [t writeToFile:f atomically:true encoding:NSUTF8StringEncoding error:nil];
    }

    function checkLabel(layer){
        return (layer.className() == "MSSliceLayer") && (layer.name().substring(0,10) == "SliceToAE_");
    }

    //check artboard number
    if(artboards.length > 35){
         NSApplication.sharedApplication().displayDialog_withTitle(local_tooMuchArtboards, local_warning);
    }

    function createUI() {
        var pickArtboardDsp = local_pickArtboardDsp + doc.currentPage().name()+ "):";
        var UI = COSAlertWindow.new();
            UI.setMessageText('Sketch2AE v' + version);
            UI.addTextLabelWithValue( local_exportDsp );
            UI.addTextLabelWithValue( local_inputLength );
            UI.addTextFieldWithValue( '15' );
            UI.addTextLabelWithValue( local_inputFPS );
            UI.addTextFieldWithValue( '25' );
            UI.addTextLabelWithValue( pickArtboardDsp );
        if ( artboards.length > 0 ) {
            for(var i = artboards.length-1;i>=0;i--){
                var subLayer = artboards[i].children();
                var checkbox = NSButton.alloc().initWithFrame(NSMakeRect( 0, i * 24, 300, 18 ));
                    checkbox.setButtonType(NSSwitchButton);
                    checkbox.setTitle(artboards[i].name());
                     checkbox.setState(false);
                for(var j=0;j<subLayer.length;j++){
                    if(checkLabel(subLayer[j])){
                        checkbox.setState(true);
                    }
                }
                UI.addAccessoryView( checkbox );
            }
        }else{
            UI.addTextLabelWithValue( local_noArtboards );
        }
        UI.addButtonWithTitle('OK');
        UI.addButtonWithTitle('Cancel');
        return UI;
    }

    var UIresp = createUI()
    var clickBtn = UIresp.runModal();
    var choosenIdx = [];
    for(var j=0;j<artboards.length;j++){
        if(UIresp.viewAtIndex(j+6).selectedCell().state() == 1){
            choosenIdx.push(artboards.length-j-1);
        }
    }
    if(clickBtn == "1000"){
        if(UIresp.viewAtIndex(6).className() != "NSTextField" && choosenIdx.length > 0){
        var compLength = UIresp.viewAtIndex(2).stringValue();
        var compFPS = UIresp.viewAtIndex(4).stringValue();
        //check the input ?
        var save = NSSavePanel.savePanel();
            save.setNameFieldStringValue(docName);
            save.setExtensionHidden(false);
        if (save.runModal() == NSFileHandlingPanelOKButton){
            var collectPath = save.URL().path();
                createFolderAtPath(collectPath);          
            var sliceDirPath = collectPath +"/slice";
            var script = 
                '//This Script is Generated by Sketch2AE\n' +
                '//\n' +
                '//contact: xixi@bigxixi.com\n' +
                '{\n' +
                '	app.beginUndoGroup("CreateComp");\n' +
                '   var osSlash = $.os.toLowerCase().indexOf("mac") >= 0 ?  "/" : "\\\\" ;\n' +
                '   var thisFile = new File($.fileName);\n ' +
                '   var dirPath = thisFile.fsName.substring(0,thisFile.fsName.lastIndexOf(osSlash)+1);\n';
            for(var n=0;n<choosenIdx.length;n++){
                var idxTemp = choosenIdx[n];
                var tempSlice = artboards[idxTemp].children(); 
                var compX = artboards[idxTemp].absoluteRect().width();
                var compY = artboards[idxTemp].absoluteRect().height();
                var abX = artboards[idxTemp].absoluteRect().x();
                var abY = artboards[idxTemp].absoluteRect().y();
                var pathBG = sliceDirPath+"/referenceBG_"+n+".png";
                var relativePathBG = "dirPath +'slice'+osSlash+'referenceBG_"+n+".png'";
                doc.saveArtboardOrSlice_toFile(artboards[idxTemp], pathBG);
                script +=
                '    var compName_'+n+' = "'+ artboards[idxTemp].name() + '";\n' +
                '    var compLength_'+n+' = ' + compLength + ";\n" +
                '    var compFPS_'+n+' = ' + compFPS + ";\n" +
                '    var comp_'+n+' = app.project.items.addComp(compName_'+n+','+
                    compX+','+compY+',1,'+'compLength_'+n+','+'compFPS_'+n+');\n'+
                '    var importArtboard_'+n+' = new ImportOptions();\n' +
                '    importArtboard_'+n+'.file = new File('+relativePathBG +');\n'+
                '    var item_'+n+' = app.project.importFile(importArtboard_'+n+');\n'+
                '    var referenceBG_'+n+' = ' +'comp_'+n+'.layers.add(item_'+n+');\n'+
                '    var rfMark_'+n+' = new MarkerValue("Reference Layer");\n' +
                '    referenceBG_'+n+'.property("ADBE Marker").setValueAtTime(0, rfMark_'+n+');\n' +
                '    referenceBG_'+n+'.name = "'+artboards[idxTemp].name()+'"\n'+
                '    referenceBG_'+n+'.label = 0;\n'+
                '    referenceBG_'+n+'.guideLayer = true;\n'+
                '    referenceBG_'+n+'.locked = true;\n'+
                '    var folderName_'+n+' = "'+ artboards[idxTemp].name() + ' folder";\n' +
                '    var folder_'+n+' = '+'app.project.items.addFolder('+'folderName_'+n+');\n'+
                '    item_'+n+'.parentFolder'+' = folder_'+n+';\n';
                
                for(var m=0;m<tempSlice.length;m++){
                    if(checkLabel(tempSlice[m])){
                        var layerP = tempSlice[m].parentGroup();
                        var layerOpacity = 100*layerP.style().contextSettings().opacity();
                        var sliceX = tempSlice[m].absoluteRect().x() - abX;
                        var sliceY = tempSlice[m].absoluteRect().y() - abY;
                        var sliceW = tempSlice[m].absoluteRect().width();
                        var sliceH = tempSlice[m].absoluteRect().height();
                        var posX = sliceX+0.5*sliceW;
                        var posY = sliceY+0.5*sliceH;
                        var slicePath = sliceDirPath + "/Slice_"+n+"_"+m+".png";
                        var relativeSlicePath = "dirPath +'slice'+osSlash+'Slice_"+n+"_"+m+".png'";
                        layerP.style().contextSettings().setOpacity(1);
                        doc.saveArtboardOrSlice_toFile(tempSlice[m], slicePath);
                        layerP.style().contextSettings().setOpacity((layerOpacity/100));
                        var layerBlendMode;
                        switch (layerP.style().contextSettings().blendMode()) {
                            case 0:
                            layerBlendMode = "BlendingMode.NORMAL"; 
                                break;
                            case 1:
                            layerBlendMode = "BlendingMode.DARKEN"; 
                                break;
                            case 2:
                            layerBlendMode = "BlendingMode.MULTIPLY"; 
                                break;
                            case 3:
                            layerBlendMode = "BlendingMode.COLOR_BURN"; 
                                break;
                            case 4:
                            layerBlendMode = "BlendingMode.LIGHTEN"; 
                                break;
                            case 5:
                            layerBlendMode = "BlendingMode.SCREEN"; 
                                break;
                            case 6:
                            layerBlendMode = "BlendingMode.COLOR_DODGE"; 
                                break;
                            case 7:
                            layerBlendMode = "BlendingMode.OVERLAY"; 
                                break;
                            case 8:
                            layerBlendMode = "BlendingMode.SOFT_LIGHT"; 
                                break;
                            case 9:
                            layerBlendMode = "BlendingMode.HARD_LIGHT"; 
                                break;
                            case 10:
                            layerBlendMode = "BlendingMode.DIFFERENCE"; 
                                break;
                            case 11:
                            layerBlendMode = "BlendingMode.EXCLUSION"; 
                                break;
                            case 12:
                            layerBlendMode = "BlendingMode.HUE"; 
                                break;
                            case 13:
                            layerBlendMode = "BlendingMode.SATURATION"; 
                                break;
                            case 14:
                            layerBlendMode = "BlendingMode.COLOR"; 
                                break;
                            case 15:
                                layerBlendMode = "BlendingMode.LUMINOSITY"; 
                                break;
                            default:
                            layerBlendMode = "BlendingMode.NORMAL"; 
                                break;
                        };
                        script +=
                        '    var importSlices_'+n+'_'+m+' = new ImportOptions();\n' +
                        '    importSlices_'+n+'_'+m+'.file = new File('+relativeSlicePath+');\n'+
                        '    var item_'+n+'_'+m+' = app.project.importFile(importSlices_'+n+'_'+m+');\n'+
                        '    item_'+n+'_'+m+'.parentFolder'+' = folder_'+n+';\n'+
                        '    var slice_'+n+'_'+m+' = ' +'comp_'+n+'.layers.add(item_'+n+'_'+m+');\n' +
                        '    slice_'+n+'_'+m+'.name' + ' = "' + tempSlice[m].name().substring(10,tempSlice[m].name().length() + 1) + '";\n' +
                        '    slice_'+n+'_'+m+'.opacity.setValue('+layerOpacity+');\n'+
                        '    slice_'+n+'_'+m+'.blendingMode = '+layerBlendMode+';\n'+
                        '    slice_'+n+'_'+m+'.transform.position.setValue(['+posX+','+posY+']);\n';
                        }
                    }
                }
                script += '	app.endUndoGroup();\n}'
                var jsxPath = collectPath + "/" + docName + ".jsx";
                writeTextToFile(script,jsxPath);
                //清理SK2AEslice
                var clearAlert = COSAlertWindow.new();
                    clearAlert.setMessageText(local_done);
                    clearAlert.addButtonWithTitle(local_clsBtn);
                    clearAlert.addButtonWithTitle(local_notNowBtn);
                if(clearAlert.runModal() == 1000){
                    clearSlices(context);
                }
                //打开脚本所在位置
                NSWorkspace.sharedWorkspace().selectFile_inFileViewerRootedAtPath(jsxPath, nil);
            }
        }else{
                var failedAlert = COSAlertWindow.new();
                failedAlert.setMessageText(local_noArtboardExpoted);
                failedAlert.runModal();
        }
    }
};


var sliceGroups = function(context){
    var doc = context.document;
    var selection = context.selection;
    if (selection.count() == 0) {
        doc.showMessage(local_chooseTips);
        return;
    }else{
        for (var j = 0; j < selection.count(); j++) {
            if(selection.objectAtIndex(j).className() == "MSLayerGroup"){
                var layerToSlice = selection[j];
                var newTempSlice = MSSliceLayer.sliceLayerFromLayer(layerToSlice);
                var newSlice = newTempSlice.copy();
                    layerToSlice.addLayer(newSlice);
                var sX = newTempSlice.frame().x() - layerToSlice.frame().x();
                var sY = newTempSlice.frame().y() - layerToSlice.frame().y();
                    newSlice.frame().setX(sX);
                    newSlice.frame().setY(sY);
                    newSlice.setName("SliceToAE_"+layerToSlice.name());
                    newSlice.exportOptions().setLayerOptions(2); 
                    newTempSlice.removeFromParent();           
                    newSlice.select_byExpandingSelection(true, true);
            }else{
                doc.showMessage(local_groupTips);
                continue;
            }
        }

    }
};

var clearSlices = function(context){
    var doc = context.document;
    var allSlices = doc.currentPage().exportableLayers();

    for(var i = 0; i < allSlices.count(); i++) {
        var sk2aeSlice = allSlices[i];
        if (sk2aeSlice.className() == "MSSliceLayer" && sk2aeSlice.name().substring(0,10) == "SliceToAE_") {
            sk2aeSlice.removeFromParent();
        }
    }
}

var  donate = function() {
    var url = "http://bigxixi.com/donate";
    NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(url));
}

var  issues = function() {
    var url = "https://github.com/bigxixi/Sketch2AE/issues";
    NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(url));
}

var  urlHelp = function() {
    var url = "https://github.com/bigxixi/Sketch2AE/";
    NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(url));
}

function getRemoteJson(url) {
    var request = NSURLRequest.requestWithURL(NSURL.URLWithString(url));
    var response = NSURLConnection.sendSynchronousRequest_returningResponse_error(request, null, null);
    var content = NSString.alloc().initWithData_encoding(response, NSUTF8StringEncoding);
    return JSON.parse(content);
};


var  checkUpdate = function(context) {
    var remoteVersionURL = "https://raw.githubusercontent.com/bigxixi/Sketch2AE/master/Sketch2AE.sketchplugin/Contents/Sketch/manifest.json";   
    var localVersion = context.plugin.version();
    var remoteManifest = getRemoteJson(remoteVersionURL);
    if(remoteManifest.version){    
        if(remoteManifest.version == localVersion){
            var app = NSApplication.sharedApplication();
            app.displayDialog_withTitle(local_updateText1 + localVersion,local_updateText2);
        }else{
            var alert = NSAlert.alloc().init();
            alert.setMessageText(local_updateText3 + remoteManifest.version + ")");
            alert.setInformativeText(local_updateText4 + localVersion + ")\n" +local_updateText5);
            alert.addButtonWithTitle("OK");
            alert.addButtonWithTitle("Cancel");
            var responseCode = alert.runModal();
            if(responseCode == 1000) {
                var newVersionURL = "https://github.com/bigxixi/Sktch2AE/archive/master.zip";
                NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(newVersionURL));
            }
        }
    }else{
        var app = NSApplication.sharedApplication();
        app.displayDialog_withTitle(local_updateText6,local_updateText7);
    }
}

var help = function(context){
    NSApplication.sharedApplication().displayDialog_withTitle(local_helpText, 'Help v'+context.plugin.version());
};
